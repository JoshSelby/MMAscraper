fights2Dec <- tempTable %>%
inner_join(fights2, by = c("Sherdog1" = "Link1", "date" = "Date")) %>%
full_join(tempTable %>%
inner_join(fights2, by = c("Sherdog2" = "Link2", "date" = "Date"))) %>%
mutate(Link1 = coalesce(Sherdog1, Link1),
Link2 = coalesce(Sherdog2, Link2)) %>%
select(colnames(tempTable), Link1, Link2) %>%
inner_join(fights2, by = c("Link1", "Link2", "date2" = "Date")) %>%
rename(Date = date2) %>%
select(colnames(fights2Dec)) %>%
rbind(fights2Dec)
}
Sherdog_to_MMAdec <- left_join(Sherdog_to_MMAdec,
fights2Dec %>%
select(Link1, fighter1Link) %>%
rename(Sherdog = Link1, MMAdec = fighter1Link) %>%
unique(),
by = "MMAdec") %>%
mutate(Sherdog = coalesce(Sherdog.x, Sherdog.y)) %>%
select(Sherdog, MMAdec) %>%
unique()
decisions <- decisions %>%
anti_join(fights2Dec, by="rownum")
fights2 <- fights2 %>%
anti_join(fights2Dec, by="match_id")
fights <- fights %>% left_join(fights2Dec) %>% select(colnames(fights), fighter1winAttr)
View(fights)
saveRDS(fights, "./scripts/11-decision-scraper/data/fights.RDS")
rm(list=ls())
source('./scripts/4-ratings/add_ratings.R', echo=TRUE)
source('./scripts/5-metrics/metrics.R', echo=TRUE)
source('./scripts/5-metrics/events.R', echo=TRUE)
source('./scripts/7-scrape-odds/updateOdds.R', echo=TRUE)
source('./scripts/8-append-odds/SherdogToBFO.R', echo=TRUE)
source('./scripts/9-various-tables/Current Stats.R', echo = TRUE)
source('./scripts/9-various-tables/Add Gender.R', echo = TRUE)
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
fightersTable <- readRDS("./scripts/9-various-tables/data/fightersTable.rds")
View(fightersTable)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
summarise(r1a = max(r1a)) %>%
arrange(desc(r1a)) %>%
head(5000)
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
if (x < 0) {
return(-x/((-x + 100)))
} else {
return(100/(x+100))
}
}
per_to_line <- function(x) {
if(x <= 0.5) {
return((1-x)/x * 100)
} else {
return(x/(1-x) * -100)
}
}
odds_to_return <- function(x, bet=10) {
if (x < 0) {
return(bet/-x*100)
} else {
return(x*bet/100)
}
}
shiny::runApp('Shiny App/MatchPredictor')
library(shiny)
library(shinyjs)
library(shinysky)
library(tidyverse)
library(DT)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
dataset2_past
dataset2_past()
dataset1_past()
any(c("draw", "NC") %in% pull(dataset2_past(), Result))
any(c("draw", "NC") %in% pull(dataset1_past(), Result))
observeEvent(dataset2_past(), {
if (any(c("draw", "NC") %in% pull(dataset2_past(), Result)))
showElement("drawNCTable2") else hideElement("drawNCTable2")
})
shiny::runApp('Shiny App/MatchPredictor')
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
source('~/GitHub/MMAscraper/./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
fightersTable <- readRDS("./scripts/9-various-tables/data/fightersTable.rds")
fightMetricsEvent <- readRDS("./scripts/5-metrics/data/fightMetricsEvent.rds")
filtfightsOdds <- readRDS("./scripts/8-append-odds/data/filtfightsOdds.RDS")
Sherdog_to_BFO <- readRDS("./scripts/8-append-odds/data/Sherdog_to_BFO.RDS")
futureOdds <- readRDS("./scripts/7-scrape-odds/data/futureOdds.RDS")
futureFights <- futureOdds %>%
left_join(Sherdog_to_BFO, by=c("fighter" = "BFO")) %>%
left_join(Sherdog_to_BFO, by=c("opponent" = "BFO"))
availFighters <- fightersTable %>%
pull(Link)
noSherdog <- futureFights %>%
select(fighter, Sherdog.x) %>%
filter(is.na(Sherdog.x)) %>%
pull(fighter)
minitbl <- tibble()
if (length(noSherdog)!=0) {
for (i in 1:length(noSherdog)) {
minitbl <- tibble(Sherdog = availFighters, BFO = noSherdog[i]) %>%
mutate(availStrip = Sherdog %>% gsub("(.*)(-\\d*$)", "\\1", .) %>% gsub("-", "", .) %>% tolower(),
noSherstrip = BFO %>% gsub("(.*)(-\\d*$)", "\\1", .) %>% gsub("-", "", .) %>% tolower(),
dist = stringdist(availStrip, noSherstrip, method = 'qgram')) %>%
arrange(dist) %>%
filter(dist == 0) %>%
select(Sherdog, BFO) %>%
rbind(minitbl)
}
# Not a perfect match
noSherdog %>% setdiff(minitbl$BFO)
#Manually enter
Sherdog_to_BFO <- minitbl %>%
full_join(Sherdog_to_BFO) %>%
rbind(c("Marcos-Rosa-Mariano-182785", "Marcos-Rosa-8870"),
c("Raulian-Paiva-Frazao-167575", "Raulian-Paiva-8553"),
c("Geraldo-de-Freitas-Jr-107229", "Geraldo-De-Freitas-8898"),
c("Carlos-Felipe-185021", "Felipe-Colares-8897")) %>%
unique()
}
# Manually change
futureOdds <- futureOdds %>%
filter((fighter != "Alex-Gorgees-8767" & opponent != "Alex-Gorgees-8767") &
(fighter != "Ryan-Spann-3502" & opponent != "Ryan-Spann-3502"))
rm(minitbl, availFighters, i, noSherdog)
i=1
minitbl <- tibble()
if (length(noSherdog)!=0) {
for (i in 1:length(noSherdog)) {
minitbl <- tibble(Sherdog = availFighters, BFO = noSherdog[i]) %>%
mutate(availStrip = Sherdog %>% gsub("(.*)(-\\d*$)", "\\1", .) %>% gsub("-", "", .) %>% tolower(),
noSherstrip = BFO %>% gsub("(.*)(-\\d*$)", "\\1", .) %>% gsub("-", "", .) %>% tolower(),
dist = stringdist(availStrip, noSherstrip, method = 'qgram')) %>%
arrange(dist) %>%
filter(dist == 0) %>%
select(Sherdog, BFO) %>%
rbind(minitbl)
}
# Not a perfect match
noSherdog %>% setdiff(minitbl$BFO)
#Manually enter
Sherdog_to_BFO <- minitbl %>%
full_join(Sherdog_to_BFO) %>%
rbind(c("Marcos-Rosa-Mariano-182785", "Marcos-Rosa-8870"),
c("Raulian-Paiva-Frazao-167575", "Raulian-Paiva-8553"),
c("Geraldo-de-Freitas-Jr-107229", "Geraldo-De-Freitas-8898"),
c("Carlos-Felipe-185021", "Felipe-Colares-8897")) %>%
unique()
}
runApp('Shiny App/MatchPredictor')
library(shiny)
library(shinyjs)
library(shinysky)
library(tidyverse)
library(DT)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
summarise(r1a = max(r1a)) %>%
arrange(desc(r1a)) %>%
head(5000)
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
if (x < 0) {
return(-x/((-x + 100)))
} else {
return(100/(x+100))
}
}
per_to_line <- function(x) {
if(x <= 0.5) {
return((1-x)/x * 100)
} else {
return(x/(1-x) * -100)
}
}
odds_to_return <- function(x, bet=10) {
if (x < 0) {
return(bet/-x*100)
} else {
return(x*bet/100)
}
}
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
summarise(r1a = first(r1a)) %>%
arrange(desc(r1a)) %>%
head(5000)
fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date))
fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
summarise(r1a = first(r1a))
fightMetricsEventOdds %>%
arrange(desc(Date)) %>%
group_by(Link1, Fighter1) %>%
summarise(r1a = first(r1a))
fightMetricsEventOdds %>%
arrange(desc(Date)) %>%
group_by(Link1, Fighter1) %>%
summarise(r1a = max(r1a))
fightMetricsEventOdds %>% ungroup()
fightMetricsEventOdds %>%
arrange(desc(Date)) %>%
ungroup() %>%
group_by(Link1, Fighter1) %>%
summarise(r1a = max(r1a))
fightMetricsEventOdds %>%
arrange(desc(Date)) %>%
ungroup() %>%
group_by(Link1, Fighter1) %>%
slice(1)
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
View(topFighters)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
library(shiny)
library(shinyjs)
library(tidyverse)
library(shinysky)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
library(DT)
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
if (x < 0) {
return(-x/((-x + 100)))
} else {
return(100/(x+100))
}
}
per_to_line <- function(x) {
if(x <= 0.5) {
return((1-x)/x * 100)
} else {
return(x/(1-x) * -100)
}
}
odds_to_return <- function(x, bet=10) {
if (x < 0) {
return(bet/-x*100)
} else {
return(x*bet/100)
}
}
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
mutate(Link1 == gsub("-", " ", Link1)) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
mutate(Link1 = gsub("-", " ", Link1)) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
library(shiny)
library(shinyjs)
library(shinysky)
library(tidyverse)
library(DT)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup() %>%
mutate(Link1 = gsub("-", " ", Link1)) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
return(if_else(x < 0,
-x/((-x + 100)),
100/(x+100)))
}
per_to_line <- function(x) {
return(if_else(x <= 0.5,
(1-x)/x * 100,
x/(1-x) * -100))
}
odds_to_return <- function(x, bet=10) {
return(if_else(x < 0,
bet/-x*100,
x*bet/100))
}
runApp('Shiny App/MatchPredictor')
library(shiny)
library(shinyjs)
library(shinysky)
library(tidyverse)
library(DT)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
conflicts()
detach("package:plyr", unload=TRUE)
conflicts()
shiny::runApp('Shiny App/MatchPredictor')
library(shiny)
library(shinyjs)
library(shinysky)
library(tidyverse)
library(DT)
library(tidyverse)
library(DT)
library(shiny)
library(shinyjs)
library(shinysky)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup() %>%
mutate(Link1 = gsub("-", " ", Link1)) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
return(if_else(x < 0,
-x/((-x + 100)),
100/(x+100)))
}
per_to_line <- function(x) {
return(if_else(x <= 0.5,
(1-x)/x * 100,
x/(1-x) * -100))
}
odds_to_return <- function(x, bet=10) {
return(if_else(x < 0,
bet/-x*100,
x*bet/100))
}
runApp('Shiny App/MatchPredictor')
shiny::runApp(display.mode="showcase")
shinyAppDir
?shinyAppDir
?runApp
runApp()
runApp
getwd()
shiny::runApp(appDir = "~/GitHub/MMAscraper/Shiny App/MatchPredictor/", display.mode="showcase")
options(shiny.reactlog=TRUE)
runApp('Shiny App/MatchPredictor')
options(shiny.error = browser)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
e
handle
library(tidyverse)
library(DT)
library(shiny)
library(shinyjs)
library(shinysky)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
ungroup() %>%
mutate(Link1 = gsub("-", " ", Link1)) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
return(if_else(x < 0,
-x/((-x + 100)),
100/(x+100)))
}
per_to_line <- function(x) {
return(if_else(x <= 0.5,
(1-x)/x * 100,
x/(1-x) * -100))
}
odds_to_return <- function(x, bet=10) {
return(if_else(x < 0,
bet/-x*100,
x*bet/100))
}
runApp('Shiny App/MatchPredictor')
options(shiny.error=recover)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
e
e
