data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F), rownames = F) %>%
formatStyle("Result", backroundColor = "lawngreen")
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F), rownames = F) %>%
formatStyle("Resultn", backgroundColor = "lawngreen")
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F), rownames = F) %>%
formatStyle("Result", backgroundColor = "lawngreen")
runApp('Shiny App/MatchPredictor')
dataset1_past() %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F),
colnames = NULL,
rownames = F) %>%
formatStyle("Result", target = "row", backgroundColor = "blue")
runApp('Shiny App/MatchPredictor')
data1past<- fightMetricsEventOdds %>%
filter(Link1 == "Travis-Fulton-80") %>%
select(Result, Fighter2, Date, Method, Method_d, R, Org, Date, r1b, r2b, odds) %>%
rename(Opponent = Fighter2)
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F), rownames = F) %>%
formatStyle("Result", backgroundColor = "lawngreen")
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
group_by(Method, Result) %>%
summarise(n=n()) %>%
spread(Result, n, fill = 0) %>%
full_join(tibble(Method = c("TKO/KO", "Submission", "Decision"),
win = 0,
loss = 0,
draw = 0)) %>%
group_by(Method) %>%
summarise(win = sum(win, na.rm = TRUE),
loss = sum(loss, na.rm = TRUE),
draw = sum(draw, na.rm = TRUE)) %>%
arrange(match(Method, c("TKO/KO", "Submission", "Decision"))) %>%
filter(Method %in% c("TKO/KO", "Submission", "Decision")) %>%
datatable(options = list(dom = 't', ordering = F), rownames = F) %>%
formatStyle("win", backgroundColor = "lawngreen") %>%
formatStyle("loss", backgroundColor = "lightpink")
runApp('Shiny App/MatchPredictor')
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
group_by(Method, Result) %>%
summarise(n=n()) %>%
spread(Result, n, fill = 0) %>%
full_join(tibble(Method = c("TKO/KO", "Submission", "Decision"),
win = 0,
loss = 0,
draw = 0)) %>%
group_by(Method) %>%
summarise(win = sum(win, na.rm = TRUE),
loss = sum(loss, na.rm = TRUE),
draw = sum(draw, na.rm = TRUE)) %>%
arrange(match(Method, c("TKO/KO", "Submission", "Decision"))) %>%
filter(Method %in% c("TKO/KO", "Submission", "Decision")) %>%
datatable(options = list(dom = 't', ordering = F), rownames = F, colnames = NULL) %>%
formatStyle("win", backgroundColor = "lawngreen") %>%
formatStyle("loss", backgroundColor = "lightpink")
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F), rownames = F, colnames = NULL) %>%
formatStyle("Result", backgroundColor = "lawngreen")
data1past<- fightMetricsEventOdds %>%
filter(grepl("Aaron-Pico", Link1)) %>%
select(Result, Fighter2, Date, Method, Method_d, R, Org, Date, r1b, r2b, odds) %>%
rename(Opponent = Fighter2)
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F), rownames = F, colnames = NULL) %>%
formatStyle("Result", backgroundColor = "lawngreen")
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F,
zeroRecords = "No records to display - custom text")), rownames = F, colnames = NULL) %>%
formatStyle("Result", backgroundColor = "lawngreen")
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F,
zeroRecords = "No records to display - custom text"), rownames = F, colnames = NULL) %>%
formatStyle("Result", backgroundColor = "lawngreen")
?datatable
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F),
language = list(zeroRecords = "No records to display - custom text"),
rownames = F, colnames = NULL) %>%
formatStyle("Result", backgroundColor = "lawngreen")
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F, language = list(zeroRecords = "No records to display - custom text")),
rownames = F, colnames = NULL) %>%
formatStyle("Result", backgroundColor = "lawngreen")
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F, language = list(zeroRecords = "")),
rownames = F, colnames = NULL) %>%
formatStyle("Result", backgroundColor = "lawngreen")
data1past %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n()) %>%
datatable(options = list(dom = 't', ordering = F, language = list(zeroRecords = " ")),
rownames = F, colnames = NULL) %>%
formatStyle("Result", backgroundColor = "lawngreen")
# -------------------------------------------------------------------
# --- EXAMPLE 1: this sets the datatable's underlying dataframe to --
# --- NULL, inside a reactive (recalculated whenever a checkbox is --
# --- clicked). While this does result in the datatable disappearing
# --- from view, the height does not show ---------------------------
# -------------------------------------------------------------------
# -------------------- does not work as intended --------------------
library(shiny)
library(shinydashboard)
library(DT)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(checkboxInput("chk", label = "NULL: ", value = T)),
dashboardBody(
box(width = 8, DT::dataTableOutput("test"))
)
)
server <- function(input, output, session) {
df <- reactive({
if (input$chk) NULL else data.frame(A = 1:20, B = 2*1:20)
})
output$test <- DT::renderDataTable({
datatable(df())
})
}
shinyApp(ui = ui, server = server)
# -------------------------------------------------------------------
# --- EXAMPLE 2: this leaves the datatable's underlying dataframe ---
# --- untouched, and instead uses shinyjs to hide the dataTableOutput
# --- when the checkbox is clicked. Now, the height readjusts as ----
# --- expected ------------------------------------------------------
# ------------------------ works as intended ------------------------
library(shiny)
library(shinydashboard)
library(DT)
library(shinyjs) # requires shinyjs !
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(checkboxInput("chk", label = "NULL: ", value = T)),
dashboardBody(useShinyjs(),
box(width = 8, DT::dataTableOutput("test"))
)
)
server <- function(input, output, session) {
observeEvent(input$chk, {
if (input$chk) hide("test") else show("test")
})
output$test <- DT::renderDataTable({
datatable(data.frame(A = 1:20, B = 2*1:20))
})
}
shinyApp(ui = ui, server = server)
------------------
# --- EXAMPLE 2: this leaves the datatable's underlying dataframe ---
# --- untouched, and instead uses shinyjs to hide the dataTableOutput
# --- when the checkbox is clicked. Now, the height readjusts as ----
# --- expected ------------------------------------------------------
# ------------------------ works as intended ------------------------
library(shiny)
library(shinydashboard)
library(DT)
library(shinyjs) # requires shinyjs !
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(checkboxInput("chk", label = "NULL: ", value = T)),
dashboardBody(useShinyjs(),
box(width = 8, DT::dataTableOutput("test"))
)
)
server <- function(input, output, session) {
observeEvent(input$chk, {
if (input$chk) hide("test") else show("test")
})
output$test <- DT::renderDataTable({
datatable(data.frame(A = 1:20, B = 2*1:20))
})
}
shinyApp(ui = ui, server = server)
------------------
# --- EXAMPLE 2: this leaves the datatable's underlying dataframe ---
# --- untouched, and instead uses shinyjs to hide the dataTableOutput
# --- when the checkbox is clicked. Now, the height readjusts as ----
# --- expected ------------------------------------------------------
# ------------------------ works as intended ------------------------
library(shiny)
------------------
# --- EXAMPLE 2: this leaves the datatable's underlying dataframe ---
# --- untouched, and instead uses shinyjs to hide the dataTableOutput
# --- when the checkbox is clicked. Now, the height readjusts as ----
# --- expected ------------------------------------------------------
# ------------------------ works as intended ------------------------
library(shiny)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinyjs")
library(shinydashboard)
library(DT)
library(shinyjs) # requires shinyjs !
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(checkboxInput("chk", label = "NULL: ", value = T)),
dashboardBody(useShinyjs(),
box(width = 8, DT::dataTableOutput("test"))
)
)
server <- function(input, output, session) {
observeEvent(input$chk, {
if (input$chk) hide("test") else show("test")
})
output$test <- DT::renderDataTable({
datatable(data.frame(A = 1:20, B = 2*1:20))
})
}
shinyApp(ui = ui, server = server)
?observeEvent
data1past
data1past %>% pull(Result)
fightMetricsEvent %>% pull(Result) %>% unique
fightMetricsEventOdds %>% pull(Result) %>% unique
data1past %>% pull(Result)
c("draw", "NC") %in% c("loss", "win", "loss")
c("draw", "NC") %in% c("loss", "win", "NC")
if(TRUE) 1
if(FALSE) 1
if(c(FALSE, FALSE)) 1
c("draw", "NC") == c("loss", "win", "NC")
c("draw", "NC") %in% c("loss", "win", "NC")
c("draw", "NC") %in% c("loss", "win", "NC") %>% any
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
?show
library(shinyjs)
runApp('Shiny App/MatchPredictor')
?observeEvent
?dashboardBody
?observeEvent
runApp('Shiny App/MatchPredictor')
any(c("draw", "NC") %in% pull(dataset1_past(), Result))
any(c("draw", "NC") %in% pull(data1past, Result))
pull(data1past, Result)
?conditionalPanel
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/7-scrape-odds/updateOdds.R', echo=TRUE)
source('./scripts/8-append-odds/SherdogToBFO.R', echo=TRUE)
source('./scripts/9-various-tables/Current Stats.R', echo = TRUE)
source('./scripts/9-various-tables/Add Gender.R', echo = TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
if (x < 0) {
return(-x/((-x + 100)))
} else {
return(100/(x+100))
}
}
odds_to_return <- function(x, bet=10) {
if (x < 0) {
return(bet/-x*100)
} else {
return(x*bet/100)
}
}
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
?conditionalPanel
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
validateCssUnit()
validateCssUnit("em")
validateCssUnit("1em")
validateCssUnit("1px")
validateCssUnit("10%")
validateCssUnit("400")
validateCssUnit("1")
?validateCssUnit
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
?useShinyjs
?show
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
?eventReactive
?reactive
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
dataTableOutput("drawNCTable1")
drawNCTable1
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
input$match_num
dataset1
dataset1_past()
dataset1_past
dataset1_past()
dataset1_past() %>% pull(Result)
any(c("draw", "NC") %in% pull(dataset1_past(), Result))
input$match_num
input$match_num <- 3
input
input$match_num
rm(input)
runApp('Shiny App/MatchPredictor')
if (any(c("draw", "NC") %in% pull(dataset1_past(), Result)))
show("drawNCTable1") else show("drawNCTable1")
any(c("draw", "NC") %in% pull(dataset1_past(), Result))
runApp('Shiny App/MatchPredictor')
input$match_num
any(c("draw", "NC") %in% pull(dataset1_past(), Result))
if (any(c("draw", "NC") %in% pull(dataset1_past(), Result)))
show("drawNCTable1") else hide("drawNCTable1")
if (TRUE)
show("drawNCTable1") else hide("drawNCTable1")
?show
runApp('Shiny App/MatchPredictor')
?conditionalPanel
futureFights
futureFights <- futureFights %>% filter(rownum > 2)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
dataset1_past()
if (any(c("draw", "NC") %in% pull(dataset1_past(), Result)))
show("drawNCTable1") else hide("drawNCTable1")
input$match_num
input$match_num
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
?disable
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
dataset1_past
dataset1_past()
dataset2_past()
output$impl
input$`match_num-selectized`
input$`match_num``
input$match_num
dataset2_past() %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n())
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
dataset2_past()
dataset2
runApp('Shiny App/MatchPredictor')
dataset1_past9)
dataset1_past()
dataset2_past()
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
?showElement
?hideElement
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/7-scrape-odds/updateOdds.R', echo=TRUE)
source('./scripts/8-append-odds/SherdogToBFO.R', echo=TRUE)
source('./scripts/9-various-tables/Current Stats.R', echo = TRUE)
source('./scripts/9-various-tables/Add Gender.R', echo = TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
source('~/GitHub/MMAscraper/./scripts/10-future-fights/futureFights.R', echo=TRUE)
