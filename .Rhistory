title = "Flyweight Ratings"),
graphFighters(c("T.J. Dillashaw", "Dominick Cruz", "Marlon Moraes", "Petr Yan", "Cody Garbrandt",
"Darrion Caldwell"),
title = "Bantamweight Ratings"),
graphFighters(c("Jose Aldo", "Patricio Freire", "Frankie Edgar", "Max Holloway", "Zabit Magomedsharipov",
"Artem Lobov"),
title = "Featherweight Ratings"),
graphFighters(c("Khabib Nurmagomedov", "Conor McGregor", "Dustin Poirier", "Tony Ferguson", "Max Holloway",
"Michael Chandler"),
title = "Lightweight Ratings"),
graphFighters(c("Colby Covington", "Tyron Woodley", "Kamaru Usman", "Georges St. Pierre", "Ben Askren",
"Rory MacDonald", "Sijara Eubanks"),
title = "Welterweight Ratings"),
graphFighters(c("Robert Whittaker", "Yoel Romero", "Kelvin Gastelum", "Anderson Silva", "Israel Adesanya",
"Gegard Mousasi"),
title = "Middleweight Rankings"),
graphFighters(c("Jon Jones", "Daniel Cormier", "Alexander Gustafsson", "Ryan Bader", "Thiago Santos",
"Johnny Walker"),
title = "Light Heavyweight Ratings"),
graphFighters(c("Daniel Cormier", "Stipe Miocic", "Fabricio Werdum", "Francis Ngannou", "Junior dos Santos",
"Ryan Bader"),
title = "Heavyweight Ratings"),
graphFighters(c("Rena Kubota", "Kanna Asakura", "Ayaka Hamasaki", "Seo Hee Ham", "Jinh Yu Frey",
"Angela Lee"),
title = "Women's Atomweight Ratings"),
graphFighters(c("Rose Namajunas", "Joanna Jedrzejczyk", "Jessica Andrade", "Tatiana Suarez", "Weili Zhang",
"Nina Ansaroff"),
title = "Women's Strawweight Ratings"),
graphFighters(c("Joanna Jedrzejczyk", "Jessica Eye", "Valentina Shevchenko", "Ilima-Lei Macfarlane", "Nicco Montano",
"Paige VanZant"),
title = "Women's Flyweight Ratings"),
graphFighters(c("Amanda Nunes", "Holly Holm", "Germaine de Randamie", "Ronda Rousey", "Aspen Ladd",
"Yana Kunitskaya"),
title = "Women's Bantamweight Ratings"),
graphFighters(c("Amanda Nunes", "Cristiane Justino", "Julia Budd", "Megan Anderson", "Kayla Harrison",
"Felicia Spencer"),
title = "Women's Featherweight Ratings"),
graphFighters(c("Gabi Garcia", "Bob Sapp", "Eric Esch", "Emmanuel Yarborough", "Phil Brooks",
"Travis Fulton"),
title = "Memeweight Ratings"),
graphFighters(c("Anderson Silva", "Georges St. Pierre", "Jon Jones", "Daniel Cormier", "Max Holloway",
"Fedor Emelianenko"),
title = "GOATweight Ratings"),
graphFighters(c("Rickson Gracie", "Royce Gracie", "Kron Gracie", "Renzo Gracie", "Roger Gracie",
"Neiman Gracie"),
title = "Gracieweight Ratings"),
graphFighters(c("Royce Gracie", "Bas Rutten", "Ken Shamrock", "Igor Vovchanchyn", "Kazushi Sakuraba",
"Masakatsu Funaki"),
title = "Legendweight Ratings"),
graphFighters(c("Khabib Nurmagomedov", "Zabit Magomedsharipov", "Magomed Magomedov", "Magomed Magomedkerimov", "Rashid Magomedov",
"Magomedrasul Khasbulaev"),
title = "Magomedweight Ratings")
)
.Last.value -> listGraphs
listGraphs[[1]]
?lapply
lapply(listGraphs, ggsave)
?ggsave
lapply(listGraphs, ggsave, device = "png")
lapply(listGraphs, function(x) ggsave(filename = "ratingPlot.png",plot = x, device = "png"))
names(listGraphs)
listGraphs[[1]]$theme$legend.position
listGraphs[[1]]$labels
listGraphs[[1]]$labels$title
names(listGraphs) <- listGraphs$labels$title
listGraphs$labels$title
listGraphs[[1]]$labels$title
listGraphs[[10]]$labels$title
listGraphs[15]$labels$title
listGraphs[1]
listGraphs[2]
listGraphs[3]
listGraphs[[3]]$labels$title
listGraphs[3]$labels$title
?sapply
sapply(listGraphs, '[[', 3)
sapply(listGraphs, '[[', 1)
sapply(listGraphs, '[[', 2)
listGraphs[[2]]
listGraphs[1]
listGraphs[[1]]$labels
sapply(listGraphs, '[[', 9)
?sapply
sapply(listGraphs, function(x) x$layers)
sapply(listGraphs, function(x) x)
sapply(listGraphs, function(x) x$labels)
sapply(listGraphs, function(x) x$labels$title)
names(list) <- sapply(listGraphs, function(x) x$labels$title)
names(list)
names(listGraphs)
names(listGraphs) <- sapply(listGraphs, function(x) x$labels$title)
lapply(listGraphs, function(x) ggsave(filename = paste0(names(listGraphs),".png"),plot = x, device = "png"))
names(listGraphs)
listGraphs
listGraphs$names(listGraphs)[1]
listGraphs$(names(listGraphs)[1])
(names(listGraphs)[1])
listGraphs[Flyweight Ratings`]
listGraphs[names(listGraphs)[1]]
getwd()
lapply(names(listGraphs), function(x) ggsave(filename = paste0("../",x,".png"),plot = listGraphs[x], device = "png"))
names(listGraphs)
names(listGraphs)[1]
listGraphs[names(listGraphs)[1]]
listGraphs[names(listGraphs)[1]] %>% class
listGraphs[[names(listGraphs)[1]]] %>% class
listGraphs[[names(listGraphs)[1]]]
lapply(names(listGraphs), function(x) ggsave(filename = paste0("../",x,".png"),plot = listGraphs[[x]], device = "png"))
getwd()
?getwd()
lapply(names(listGraphs), function(x) ggsave(filename = paste0("../../../Desktop/Rating Pictures/",x,".png"),
plot = listGraphs[[x]], device = "png"))
lapply(names(listGraphs), function(x) ggsave(filename = paste0("../../../Desktop/Rating Pictures/",x,".png"),
plot = listGraphs[[x]], device = "png"))
lapply(names(listGraphs), function(x) ggsave(filename = paste0("../../../Desktop/Rating Pictures/",x,".png"),
plot = listGraphs[[x]], device = "png"))
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
library(tidyverse)
library(DT)
library(shiny)
library(shinyjs)
library(shinysky)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
return(sprintf(fmt = "+%s", format(x, ...)))
}
else {
return(x)
}
}
line_to_per <- function(x) {
return(if_else(x < 0, -x/((-x + 100)), 100/(x+100)))
}
per_to_line <- function(x) {
return(if_else(x <= 0.5, (1-x)/x * 100, x/(1-x) * -100))
}
odds_to_return <- function(x, bet=10) {
return(if_else(x < 0, bet/-x*100, x*bet/100))
}
runApp('Shiny App/MatchPredictor')
detach("package:plyr", unload=TRUE)
runApp('Shiny App/MatchPredictor')
library(tidyverse)
library(DT)
library(shiny)
library(shinyjs)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
rlang::last_error()
summary(rlang::last_error())
fightMetricsEvent <- readRDS("~/GitHub/MMAscraper/scripts/5-metrics/data/fightMetricsEvent.rds")
rm(fightMetricsEvent)
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds")
fightMetricsEventOdds %>%
filter(grepl("Ronda-Rousey", Link1)) %>% pull(Link1) %>% unique
library(data.table)
library(tidyverse)
fightMetricsEventOdds %>%
filter(grepl("Ronda-Rousey", Link1)) %>% pull(Link1) %>% unique
toSearch <- "Ronda-Rousey-73073"
fighterOpp <- tibble(Link1 = as.character(NA), Link0 = toSearch)
fighterOpp1 <- tibble()
i= 1
while (length(toSearch)>0) {
fighterOpp1 <- fightMetricsEvent %>%
filter(Link1 %in% toSearch & Result == "win") %>%
select(Link1, Link2) %>%
unique %>%
filter(!(Link2 %in% c(searched, toSearch, "Javio-Flores-10477"))) %>%
left_join(fighterOpp, ., by=c("Link0" = "Link1"))
colnames(fighterOpp1) <- paste0("Link", (i+1):0)
colnames(fighterOpp) <- paste0("Link", (i+1):1)
fighterOpp <- bind_rows(fighterOpp, fighterOpp1) %>% unique
searched <- c(toSearch, searched)
toSearch <- fighterOpp %>% pull(fighterOpp %>% colnames %>% tail(1)) %>%
unique %>%
na.omit %>%
as.character() %>%
setdiff(searched)
i=i+1
print(paste0("iter: ", i, ", to search: ", length(toSearch), ", searched: ", length(searched)))
}
while (length(toSearch)>0) {
fighterOpp1 <- fightMetricsEventOdds %>%
filter(Link1 %in% toSearch & Result == "win") %>%
select(Link1, Link2) %>%
unique %>%
filter(!(Link2 %in% c(searched, toSearch, "Javio-Flores-10477"))) %>%
left_join(fighterOpp, ., by=c("Link0" = "Link1"))
colnames(fighterOpp1) <- paste0("Link", (i+1):0)
colnames(fighterOpp) <- paste0("Link", (i+1):1)
fighterOpp <- bind_rows(fighterOpp, fighterOpp1) %>% unique
searched <- c(toSearch, searched)
toSearch <- fighterOpp %>% pull(fighterOpp %>% colnames %>% tail(1)) %>%
unique %>%
na.omit %>%
as.character() %>%
setdiff(searched)
i=i+1
print(paste0("iter: ", i, ", to search: ", length(toSearch), ", searched: ", length(searched)))
}
searched <- c()
toSearch <- "Ronda-Rousey-73073"
fighterOpp <- tibble(Link1 = as.character(NA), Link0 = toSearch)
fighterOpp1 <- tibble()
i= 1
while (length(toSearch)>0) {
fighterOpp1 <- fightMetricsEventOdds %>%
filter(Link1 %in% toSearch & Result == "win") %>%
select(Link1, Link2) %>%
unique %>%
filter(!(Link2 %in% c(searched, toSearch, "Javio-Flores-10477"))) %>%
left_join(fighterOpp, ., by=c("Link0" = "Link1"))
colnames(fighterOpp1) <- paste0("Link", (i+1):0)
colnames(fighterOpp) <- paste0("Link", (i+1):1)
fighterOpp <- bind_rows(fighterOpp, fighterOpp1) %>% unique
searched <- c(toSearch, searched)
toSearch <- fighterOpp %>% pull(fighterOpp %>% colnames %>% tail(1)) %>%
unique %>%
na.omit %>%
as.character() %>%
setdiff(searched)
i=i+1
print(paste0("iter: ", i, ", to search: ", length(toSearch), ", searched: ", length(searched)))
}
rm(fighterOpp1)
fighterOpp <- fighterOpp %>%
select(colnames(fighterOpp) %>% head(-1) %>% tail(-1))
fighterOpp <- fighterOpp %>% select(colnames(fighterOpp) %>% rev) %>% as.data.table()
fighterOpp <- setnames(fighterOpp[, {un <- unlist(.SD); as.list(un[order(un=='')])},
.(grp = 1:nrow(fighterOpp))][, grp := NULL], names(fighterOpp))[]
fighterOpp <- fighterOpp %>% group_by(Link1) %>% slice(1)
fighterOpp$distance <- rowSums(!is.na(fighterOpp))-1
View(fighterOpp)
fightMetricsEventOdds %>%
filter(grepl("Meisha-Tate", Link1)) %>% pull(Link1) %>% unique
fightMetricsEventOdds %>%
filter(grepl("Miesha-Tate", Link1)) %>% pull(Link1) %>% unique
searched <- c()
toSearch <- "Miesha-Tate-26252"
fighterOpp <- tibble(Link1 = as.character(NA), Link0 = toSearch)
fighterOpp1 <- tibble()
i= 1
while (length(toSearch)>0) {
fighterOpp1 <- fightMetricsEventOdds %>%
filter(Link1 %in% toSearch & Result == "win") %>%
select(Link1, Link2) %>%
unique %>%
filter(!(Link2 %in% c(searched, toSearch, "Javio-Flores-10477"))) %>%
left_join(fighterOpp, ., by=c("Link0" = "Link1"))
colnames(fighterOpp1) <- paste0("Link", (i+1):0)
colnames(fighterOpp) <- paste0("Link", (i+1):1)
fighterOpp <- bind_rows(fighterOpp, fighterOpp1) %>% unique
searched <- c(toSearch, searched)
toSearch <- fighterOpp %>% pull(fighterOpp %>% colnames %>% tail(1)) %>%
unique %>%
na.omit %>%
as.character() %>%
setdiff(searched)
i=i+1
print(paste0("iter: ", i, ", to search: ", length(toSearch), ", searched: ", length(searched)))
}
rm(fighterOpp1)
fighterOpp <- fighterOpp %>%
select(colnames(fighterOpp) %>% head(-1) %>% tail(-1))
fighterOpp <- fighterOpp %>% select(colnames(fighterOpp) %>% rev) %>% as.data.table()
fighterOpp <- setnames(fighterOpp[, {un <- unlist(.SD); as.list(un[order(un=='')])},
.(grp = 1:nrow(fighterOpp))][, grp := NULL], names(fighterOpp))[]
fighterOpp <- fighterOpp %>% group_by(Link1) %>% slice(1)
fighterOpp$distance <- rowSums(!is.na(fighterOpp))-1
toSearch <- "Jon-Jones"
searched <- c()
toSearch <- "Jon-Jones"
fighterOpp <- tibble(Link1 = as.character(NA), Link0 = toSearch)
fighterOpp1 <- tibble()
i= 1
while (length(toSearch)>0) {
fighterOpp1 <- fightMetricsEventOdds %>%
filter(Link1 %in% toSearch & Result == "win") %>%
select(Link1, Link2) %>%
unique %>%
filter(!(Link2 %in% c(searched, toSearch, "Javio-Flores-10477"))) %>%
left_join(fighterOpp, ., by=c("Link0" = "Link1"))
colnames(fighterOpp1) <- paste0("Link", (i+1):0)
colnames(fighterOpp) <- paste0("Link", (i+1):1)
fighterOpp <- bind_rows(fighterOpp, fighterOpp1) %>% unique
searched <- c(toSearch, searched)
toSearch <- fighterOpp %>% pull(fighterOpp %>% colnames %>% tail(1)) %>%
unique %>%
na.omit %>%
as.character() %>%
setdiff(searched)
i=i+1
print(paste0("iter: ", i, ", to search: ", length(toSearch), ", searched: ", length(searched)))
}
rm(fighterOpp1)
fighterOpp <- fighterOpp %>%
select(colnames(fighterOpp) %>% head(-1) %>% tail(-1))
fighterOpp <- fighterOpp %>% select(colnames(fighterOpp) %>% rev) %>% as.data.table()
fighterOpp <- setnames(fighterOpp[, {un <- unlist(.SD); as.list(un[order(un=='')])},
.(grp = 1:nrow(fighterOpp))][, grp := NULL], names(fighterOpp))[]
fighterOpp <- fighterOpp %>% group_by(Link1) %>% slice(1)
fighterOpp$distance <- rowSums(!is.na(fighterOpp))-1
fightMetricsEventOdds %>%
filter(grepl("Jon-Jones", Link1)) %>% pull(Link1) %>% unique
searched <- c()
toSearch <- "Jon-Jones-27944"
fighterOpp <- tibble(Link1 = as.character(NA), Link0 = toSearch)
fighterOpp1 <- tibble()
i= 1
while (length(toSearch)>0) {
fighterOpp1 <- fightMetricsEventOdds %>%
filter(Link1 %in% toSearch & Result == "win") %>%
select(Link1, Link2) %>%
unique %>%
filter(!(Link2 %in% c(searched, toSearch, "Javio-Flores-10477"))) %>%
left_join(fighterOpp, ., by=c("Link0" = "Link1"))
colnames(fighterOpp1) <- paste0("Link", (i+1):0)
colnames(fighterOpp) <- paste0("Link", (i+1):1)
fighterOpp <- bind_rows(fighterOpp, fighterOpp1) %>% unique
searched <- c(toSearch, searched)
toSearch <- fighterOpp %>% pull(fighterOpp %>% colnames %>% tail(1)) %>%
unique %>%
na.omit %>%
as.character() %>%
setdiff(searched)
i=i+1
print(paste0("iter: ", i, ", to search: ", length(toSearch), ", searched: ", length(searched)))
}
rm(fighterOpp1)
fighterOpp <- fighterOpp %>%
select(colnames(fighterOpp) %>% head(-1) %>% tail(-1))
fighterOpp <- fighterOpp %>% select(colnames(fighterOpp) %>% rev) %>% as.data.table()
fighterOpp <- setnames(fighterOpp[, {un <- unlist(.SD); as.list(un[order(un=='')])},
.(grp = 1:nrow(fighterOpp))][, grp := NULL], names(fighterOpp))[]
fighterOpp <- fighterOpp %>% group_by(Link1) %>% slice(1)
fighterOpp$distance <- rowSums(!is.na(fighterOpp))-1
detach("package:tidyverse")
library(shiny)
library(shinyjs)
library(shinysky)
library(plotly)
library(tidyverse)
library(DT)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
return(sprintf(fmt = "+%s", format(x, ...)))
}
else {
return(x)
}
}
line_to_per <- function(x) {
return(if_else(x < 0, -x/((-x + 100)), 100/(x+100)))
}
per_to_line <- function(x) {
return(if_else(x <= 0.5, (1-x)/x * 100, x/(1-x) * -100))
}
odds_to_return <- function(x, bet=10) {
return(if_else(x < 0, bet/-x*100, x*bet/100))
}
######
graphFighters <- function(fighterNames, title=NULL) {
Fighters <- fightMetricsEventOdds %>%
filter(Fighter1 %in% fighterNames) %>%
group_by(Link1, Fighter1) %>%
summarise(maxRat = max(r1a)) %>%
arrange(desc(maxRat)) %>%
group_by(Fighter1) %>%
slice(1) %>%
pull(Link1)
g <- ggplot(fightMetricsEventOdds %>%
mutate(Date = as.Date(Date)) %>%
rename(Rating = r1a, Fighter = Fighter1) %>%
filter(Link1 %in% Fighters),
aes(x = Date, y = Rating, col = Fighter)) +
geom_line() +
geom_point() +
scale_x_date(breaks = function(x) seq.Date(from=min(x), to=max(x), by="2 years"), date_labels = "%Y") +
xlab("Date") +
ylab("Elo Rating") +
ggtitle(title)
# test <<- fightMetricsEventOdds %>%
#   filter(Fighter1 %in% fighterNames)
return(g)
}
g <- graphFighters(c("Darren Till", "Jorge Masvidal"))
ggplotly(g)
runApp('Shiny App/MatchPredictor')
ggplotly(g) %>%
layout(legend = list(x=0, y=1, font=list(size = 8), tracegroupgap = 7), xaxis = list(title="", font=list(size=10)),
margin = list(l=0,r=0,b=0,t=0, pad = 0)) %>%
config(displayModeBar = F)
ggplotly(g) %>%
layout(legend = list(x=0, y=1, font=list(size = 8), tracegroupgap = 7), xaxis = list(title="", font=list(size=8)),
margin = list(l=0,r=0,b=0,t=0, pad = 0)) %>%
config(displayModeBar = F)
rm(g)
rm(i)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
graphFighters <- function(fighterNames, title=NULL) {
Fighters <- fightMetricsEventOdds2 %>%
filter(Fighter1 %in% fighterNames) %>%
group_by(Link1, Fighter1) %>%
summarise(maxRat = max(r1a)) %>%
arrange(desc(maxRat)) %>%
group_by(Fighter1) %>%
slice(1) %>%
pull(Link1)
g <- ggplot(fightMetricsEventOdds2 %>%
filter(Link1 %in% Fighters),
aes(x = Date, y = r1a, col = Fighter1)) +
geom_line() +
geom_point() +
scale_x_date(breaks = function(x) seq.Date(from=min(x), to=max(x), by="2 years"), date_labels = "%Y") +
theme(legend.position="bottom") +
ylab("Elo Rating") +
ggtitle(title)
# test <<- fightMetricsEventOdds %>%
#   filter(Fighter1 %in% fighterNames)
}
graphFighters <- function(fighterNames, title=NULL) {
Fighters <- fightMetricsEventOdds2 %>%
filter(Fighter1 %in% fighterNames) %>%
group_by(Link1, Fighter1) %>%
summarise(maxRat = max(r1a)) %>%
arrange(desc(maxRat)) %>%
group_by(Fighter1) %>%
slice(1) %>%
pull(Link1)
g <- ggplot(fightMetricsEventOdds2 %>%
filter(Link1 %in% Fighters),
aes(x = Date, y = r1a, col = Fighter1)) +
geom_line() +
geom_point() +
scale_x_date(breaks = function(x) seq.Date(from=min(x), to=max(x), by="2 years"), date_labels = "%Y") +
theme(legend.position="bottom") +
ylab("Elo Rating") +
ggtitle(title)
# test <<- fightMetricsEventOdds %>%
#   filter(Fighter1 %in% fighterNames)
return(g)
}
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
######
graphFighters <- function(fighterNames, title=NULL) {
Fighters <- fightMetricsEventOdds %>%
filter(Fighter1 %in% fighterNames) %>%
group_by(Link1, Fighter1) %>%
summarise(maxRat = max(r1a)) %>%
arrange(desc(maxRat)) %>%
group_by(Fighter1) %>%
slice(1) %>%
pull(Link1)
g <- ggplot(fightMetricsEventOdds %>%
mutate(Date = as.Date(Date)) %>%
rename(Rating = r1a, Fighter = Fighter1) %>%
filter(Link1 %in% Fighters),
aes(x = Date, y = Rating, col = Fighter)) +
geom_line() +
geom_point() +
scale_x_date(breaks = function(x) seq.Date(from=min(x), to=max(x), by="2 years"), date_labels = "%Y") +
xlab("Date") +
ylab("Elo Rating") +
ggtitle(title)
# test <<- fightMetricsEventOdds %>%
#   filter(Fighter1 %in% fighterNames)
}
g <- graphFighters(c("Darren Till", "Jorge Masvidal"))
ggplotly(g)
runApp('Shiny App/MatchPredictor')
