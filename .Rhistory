winnings = sum(winnings),
ROI = round(sum(winnings)/sum(bet)*100,2),
winper = sum(Result=="win")/n()
)
runApp('Shiny App/MatchPredictor')
source('~/GitHub/MMAscraper/scripts/0-run-scripts/Update_Everything.R', echo=TRUE)
fightMetricsEvent <- readRDS(file = "./scripts/5-metrics/data/fightMetricsEvent.rds")
lastFight <- fightMetricsEvent %>%
group_by(Link1) %>%
arrange(match_id) %>%
slice(n()) %>%
ungroup
fightersTable <- lastFight %>%
mutate(wins1 = ifelse(Result == "win", wins1 + 1, wins1),
loss1 = ifelse(Result == "loss", loss1 + 1, loss1),
draw1 = ifelse(Result == "draw", draw1 + 1, draw1),
nc1 = ifelse(Result == "NC", nc1 + 1, nc1),
BDchar = as.character(BD1)) %>%
select(Link1, Result, Link2, Date, r1a, Fighter1, BD1, BDchar, wins1, loss1, draw1, nc1, Org) %>%
rename(Link = Link1, Last.Result = Result, Last.Opponent = Link2, Last.Date = Date, rating = r1a, Name = Fighter1,
Birthday = BD1, wins = wins1, loss = loss1, draw = draw1, nc = nc1) %>%
arrange(desc(rating)) %>%
as.data.table()
saveRDS(fightersTable, "./scripts/9-various-tables/data/fightersTable.rds")
View(fightersTable)
source('~/GitHub/MMAscraper/scripts/0-run-scripts/Update_Everything.R', echo=TRUE)
runApp('Shiny App/MatchPredictor')
source('~/GitHub/MMAscraper/Shiny App/MatchPredictor/scriptsForApp.R', echo=TRUE)
runApp('Shiny App/MatchPredictor')
source('~/GitHub/MMAscraper/Shiny App/MatchPredictor/scriptsForApp.R', echo=TRUE)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
topFighters <- fightMetricsEventOdds %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
source('~/GitHub/MMAscraper/Shiny App/MatchPredictor/scriptsForApp.R', echo=TRUE)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds2 <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id)) %>%
right_join(futureFights %>% select(Link1))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
topFighters <- fightMetricsEventOdds2 %>%
group_by(Link1, Fighter1) %>%
arrange(desc(Date)) %>%
slice(1) %>%
select(Link1, Fighter1, r1a) %>%
arrange(desc(r1a)) %>%
head(5000)
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
return(sprintf(fmt = "+%s", format(x, ...)))
}
else {
return(x)
}
}
line_to_per <- function(x) {
return(if_else(x < 0, -x/((-x + 100)), 100/(x+100)))
}
per_to_line <- function(x) {
return(if_else(x <= 0.5, (1-x)/x * 100, x/(1-x) * -100))
}
odds_to_return <- function(x, bet=10) {
return(if_else(x < 0, bet/-x*100, x*bet/100))
}
######
graphFighters <- function(fighterNames, title=NULL, opponent=FALSE) {
Fighters <- fightMetricsEventOdds %>%
filter(Fighter1 %in% fighterNames) %>%
group_by(Link1, Fighter1) %>%
summarise(maxRat = max(r1a)) %>%
arrange(desc(maxRat)) %>%
group_by(Fighter1) %>%
slice(1) %>%
pull(Link1)
ggplot(fightMetricsEventOdds %>%
mutate(Date = as.Date(Date)) %>%
rename(Rating = r1a, Fighter = Fighter1, Opponent = r2b) %>%
filter(Link1 %in% Fighters),
aes(x = Date)) +
geom_line(aes(y=Rating, col=Fighter)) +
geom_point(aes(y=Rating, col=Fighter)) +
{if(opponent) geom_point(aes(y=Opponent, col=Fighter, shape = 1))} +
scale_shape_identity() +
scale_x_date(breaks = function(x) seq.Date(from=min(x), to=max(x), by="2 years"), date_labels = "%Y") +
xlab("Date") +
ylab("Elo Rating") +
ggtitle(title)
# test <<- fightMetricsEventOdds %>%
#   filter(Fighter1 %in% fighterNames)
}
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
######
graphFighters <- function(fighterNames, title=NULL, opponent=FALSE) {
Fighters <- fightMetricsEventOdds2 %>%
filter(Fighter1 %in% fighterNames) %>%
group_by(Link1, Fighter1) %>%
summarise(maxRat = max(r1a)) %>%
arrange(desc(maxRat)) %>%
group_by(Fighter1) %>%
slice(1) %>%
pull(Link1)
ggplot(fightMetricsEventOdds2 %>%
mutate(Date = as.Date(Date)) %>%
rename(Rating = r1a, Fighter = Fighter1, Opponent = r2b) %>%
filter(Link1 %in% Fighters),
aes(x = Date)) +
geom_line(aes(y=Rating, col=Fighter)) +
geom_point(aes(y=Rating, col=Fighter)) +
{if(opponent) geom_point(aes(y=Opponent, col=Fighter, shape = 1))} +
scale_shape_identity() +
scale_x_date(breaks = function(x) seq.Date(from=min(x), to=max(x), by="2 years"), date_labels = "%Y") +
xlab("Date") +
ylab("Elo Rating") +
ggtitle(title)
# test <<- fightMetricsEventOdds %>%
#   filter(Fighter1 %in% fighterNames)
}
runApp('Shiny App/MatchPredictor')
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
source('./scripts/9-various-tables/ROI-analyse.R', echo=TRUE)
View(futureFights)
source('~/GitHub/MMAscraper/scripts/0-run-scripts/Update_Everything.R', echo=TRUE)
warnings()
test2
test2 %>% View
source('~/GitHub/MMAscraper/scripts/0-run-scripts/Update_Everything.R', echo=TRUE)
View(test2)
source('~/GitHub/MMAscraper/scripts/quick-fixes.R', echo=TRUE)
source('~/GitHub/MMAscraper/scripts/0-run-scripts/Update_Everything.R', echo=TRUE)
View(test)
View(futureFights)
View(test2)
View(test)
# Run following files to completely update everything
#source('./scripts/0-run-scripts/Initial Run.R', echo=TRUE)
source('./scripts/1-raw-data/update-scraper.R', echo=TRUE)
source('./scripts/quick-fixes.R', echo = TRUE)
source('./scripts/3-records/recordAdder.R', echo=TRUE)
source('./scripts/11-decision-scraper/decisionScraper.R', echo = TRUE)
source('./scripts/11-decision-scraper/appendDecision.R', echo = TRUE)
source('./scripts/4-ratings/add_ratings.R', echo=TRUE)
source('./scripts/5-metrics/metrics.R', echo=TRUE)
source('./scripts/5-metrics/events.R', echo=TRUE)
source('./scripts/7-scrape-odds/updateOdds.R', echo=TRUE)
source('./scripts/8-append-odds/SherdogToBFO.R', echo=TRUE)
source('./scripts/9-various-tables/Current Stats.R', echo = TRUE)
source('./scripts/9-various-tables/Add Gender.R', echo = TRUE)
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
source('./scripts/9-various-tables/ROI-analyse.R', echo=TRUE)
runApp('Shiny App/MatchPredictor')
fightersTable <- lastFight %>%
mutate(wins1 = ifelse(Result == "win", wins1 + 1, wins1),
loss1 = ifelse(Result == "loss", loss1 + 1, loss1),
draw1 = ifelse(Result == "draw", draw1 + 1, draw1),
nc1 = ifelse(Result == "NC", nc1 + 1, nc1),
BDchar = as.character(BD1)) %>%
select(Link1, Result, Link2, Date, r1a, Fighter1, BD1, BDchar, wins1, loss1, draw1, nc1, Org) %>%
rename(Link = Link1, Last.Result = Result, Last.Opponent = Link2, Last.Date = Date, rating = r1a, Name = Fighter1,
Birthday = BD1, wins = wins1, loss = loss1, draw = draw1, nc = nc1) %>%
arrange(desc(rating))
fightMetricsEvent <- readRDS(file = "./scripts/5-metrics/data/fightMetricsEvent.rds")
lastFight <- fightMetricsEvent %>%
group_by(Link1) %>%
arrange(match_id) %>%
slice(n()) %>%
ungroup
fightersTable <- lastFight %>%
mutate(wins1 = ifelse(Result == "win", wins1 + 1, wins1),
loss1 = ifelse(Result == "loss", loss1 + 1, loss1),
draw1 = ifelse(Result == "draw", draw1 + 1, draw1),
nc1 = ifelse(Result == "NC", nc1 + 1, nc1),
BDchar = as.character(BD1)) %>%
select(Link1, Result, Link2, Date, r1a, Fighter1, BD1, BDchar, wins1, loss1, draw1, nc1, Org) %>%
rename(Link = Link1, Last.Result = Result, Last.Opponent = Link2, Last.Date = Date, rating = r1a, Name = Fighter1,
Birthday = BD1, wins = wins1, loss = loss1, draw = draw1, nc = nc1) %>%
arrange(desc(rating))
View(fightersTable)
View(test2)
if (!require("foreach")) install.packages("foreach")
library(foreach)
if (!require("doSNOW")) install.packages("doSNOW")
library(doSNOW)
if (!require("parallel")) install.packages("parallel")
library(parallel)
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
# Initialize scraper
searched_links <- tibble(link = character(), birthday = date())
links_to_search <- c()
# Start our search with Chael P. Sonnen. Can replace this with ANY fighter's Tapology link.
link = "13910-Artem-Lobov"
fighter_page <- tryCatch({
link %>%
paste0("https://www.tapology.com/fightcenter/fighters/", .) %>%
read_html()
},
error=function(cond) {
message(cond)
no_errors = FALSE
return(fighter_page)
},
warning=function(cond) {
message(cond)
no_errors = FALSE
return(fighter_page)
})
fighter_page
fighter_page %> html_nodes()
fighter_page %> html_nodes(".fighterFightResults")
fighter_page %>% html_nodes(".fighterFightResults")
fighter_page %>% html_nodes()
fighter_page %>% html_nodes(".fighterFightResults")
fighter_page %>% html_nodes("ul")
fighter_page %>% html_nodes(".result")
fighter_page %>% html_nodes("li:nth-child(1) span")
fighter_page %>% html_nodes("#stats li:nth-child(1) span")
fighter_page %>% html_nodes("#stats li:nth-child(1) span") %>% html_text()
# Track Fighter name
fighter_name <- fighter_page %>%
# use CSS selector to extract relevant entries from html
html_nodes("#stats li:nth-child(1) span") %>%
# turn the html output into simple text fields
html_text()
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("#stats li:nth-child(3) span") %>%
html_text()
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("li:nth-child(5) span:nth-child(4)") %>%
html_text()
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("li:nth-child(5) span:nth-child(4)") %>%
html_text() %>%
gsub("\\.","-")
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("li:nth-child(5) span:nth-child(4)") %>%
html_text() %>%
gsub("//.","-")
?gsub
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("li:nth-child(5) span:nth-child(4)") %>%
html_text() %>%
gsub("//.","-",.)
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("li:nth-child(5) span:nth-child(4)") %>%
html_text() %>%
gsub("\\.","-",.)
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("li:nth-child(5) span:nth-child(4)") %>%
html_text() %>%
gsub("\\.","-",.) %>%
as.Date()
fighter_birthday <- fighter_page %>%
html_nodes("li:nth-child(5) span:nth-child(4)") %>%
html_text() %>%
gsub("\\.","-",.)
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("li:nth-child(5) span:nth-child(4)") %>%
html_text() %>%
gsub("\\.","-",.) %>%
as.Date()
# Start our search with Chael P. Sonnen. Can replace this with ANY fighter's Tapology link.
link = "13910-Artem-Lobov"
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("rvest")) install.packages("rvest")
library(rvest)
if (!require("httr")) install.packages("httr")
library(httr)
if (!require("xml2")) install.packages("xml2")
library(xml2)
# Initialize scraper
searched_links <- tibble(link = character(), birthday = date())
links_to_search <- c()
no_errors = TRUE
# read the webpage page of the fighter that we are interested in
fighter_page <- tryCatch({
link %>%
paste0("https://www.tapology.com/fightcenter/fighters/", .) %>%
read_html()
},
error=function(cond) {
message(cond)
no_errors = FALSE
return(fighter_page)
},
warning=function(cond) {
message(cond)
no_errors = FALSE
return(fighter_page)
})
# Track Fighter name
fighter_name <- fighter_page %>%
# use CSS selector to extract relevant entries from html
html_nodes("#stats li:nth-child(1) span") %>%
# turn the html output into simple text fields
html_text()
# Fighter Nickname
fighter_nickname <- fighter_page %>%
html_nodes("#stats li:nth-child(3) span") %>%
html_text()
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("li:nth-child(5) span:nth-child(4)") %>%
html_text() %>%
gsub("\\.","-",.) %>%
as.Date()
# Fighter Birthday
fighter_birthday <- fighter_page %>%
html_nodes("#stats li:nth-child(5) span:nth-child(4)") %>%
html_text() %>%
gsub("\\.","-",.) %>%
as.Date()
# Fighter Height
fighter_height <- fighter_page %>%
html_nodes("#stats li:nth-child(9) span:nth-child(2)") %>%
html_text()
# Fighter Height
fighter_height <- fighter_page %>%
html_nodes("#stats li:nth-child(9) span:nth-child(2)") %>%
html_text() %>%
gsub("(.*\\()(\\d*)(.*)","\\2")
# Fighter Height
fighter_height <- fighter_page %>%
html_nodes("#stats li:nth-child(9) span:nth-child(2)") %>%
html_text() %>%
gsub("(.*\\()(\\d*)(.*)","(\\2)")
# Fighter Height
fighter_height <- fighter_page %>%
html_nodes("#stats li:nth-child(9) span:nth-child(2)") %>%
html_text() %>%
gsub("(.*\\()(\\d*)(.*)","\\2",.)
# Fighter Height
fighter_height_cm <- fighter_page %>%
html_nodes("#stats li:nth-child(9) span:nth-child(2)") %>%
html_text() %>%
gsub("(.*\\()(\\d*)(.*)","\\2",.) %>%
as.numeric()
rm(fighter_height)
fighter_reach_cm <- fighter_page %>%
html_nodes("#stats li:nth-child(9) span:nth-child(4)") %>%
html_text() %>%
gsub("(.*\\()(\\d*)(.*)","\\2",.) %>%
as.numeric()
fighter_birthplace <- fighter_page %>%
html_nodes("#stats li:nth-child(11) span") %>%
html_text()
fighter_tbl <- tibble(
fighter_link, fighter_name, fighter_birthday,
fighter_height_cm, fighter_reach_cm, fighter_birthplace, fighter_nickname
)
fighter_tbl <- tibble(
link, fighter_name, fighter_birthday,
fighter_height_cm, fighter_reach_cm, fighter_birthplace, fighter_nickname
)
View(fighter_tbl)
fighter_reach_cm <- fighter_page %>%
html_nodes(".result")
fighter_reach_cm <- fighter_page %>%
html_nodes("#stats li:nth-child(9) span:nth-child(4)") %>%
html_text() %>%
gsub("(.*\\()(\\d*)(.*)","\\2",.) %>%
as.numeric()
fighter_page %>%
html_nodes(".result")
fighter_page %>%
html_nodes("result")
fighter_page %>%
html_nodes("li:nth-child(1) .result")
fighter_page %>%
html_nodes("span , li:nth-child(1) .result")
fighter_page %>%
html_nodes("span")
fighter_page %>%
html_nodes(".tall span:nth-child(2)")
fighter_page %>%
html_nodes("li:nth-child(3)")
fighter_page %>%
html_nodes("li:nth-child(3)") %>% html_text()
fighter_page %>%
html_nodes("#fighterRecord li:nth-child(3)") %>% html_text()
fighter_page %>%
html_nodes("#fighterRecord li:nth-child(3)")
fighter_page %>%
html_nodes("#stats")
fighter_page %>%
html_nodes("#stats") %>% html_text()
fighter_page %>%
html_nodes("#fighterRecord") %>% html_text()
fighter_page %>%
html_nodes("#fighterRecord")
fighter_page %>%
html_nodes("#fighterRecord .fighterFightResults")
fighter_page %>%
html_nodes(".fighterFightResults")
fighter_page %>%
html_nodes(":nth-child(3) .name a")
fighter_page %>%
html_nodes(".name a")
fighter_page %>%
html_nodes(".name")
fighter_page %>%
html_nodes("a")
fighter_page %>%
html_nodes("a") %>% html_text()
fighter_page
fighter_page[1]
fighter_page %>% class
fighter_page[2] %> read_xml
fighter_page[2] %>% read_xml
fighter_page[2] %>% class
fighter_page[2]
fighter_page[[2]]
fighter_page
fighter_page %>% xml_structure()
fighter_page %>% xml_structure()
install.packages("RSelenium")
if (!require("RSelenium")) install.packages("RSelenium")
require(RSelenium)
RSelenium::startServer()
remDr <- remoteDriver()
remDr$open()
rm(remDr)
fighter_page %>%
html_nodes(".name") %>% html_text()
fighter_page %>%
html_nodes(".name")
fighter_page %>%
html_nodes("#stats")
fighter_page %>%
html_nodes("#stats") %>% html_text()
fighter_page %>%
html_nodes("#stats span") %>% html_text()
fighter_page %>%
html_nodes("#stats strong") %>% html_text()
fighter_page %>%
html_nodes("#fighterRecord strong") %>% html_text()
fighter_page %>%
html_nodes("#fighterRecord")
fighter_page %>%
html_nodes("#react-container")
fighter_page %>%
html_nodes("h3 , span, .result")
fighter_page %>%
html_nodes("#fighterRecordControls")
GET("https://www.tapology.com/packs/application-39ffd3306a0b9b17c82c.js")
r <- GET("https://www.tapology.com/packs/application-39ffd3306a0b9b17c82c.js")
r
jsonlite::fromJSON(content(r, as = "text"))
class(r)
?GET
fighter_page %>% html_nodes("li")
fighter_page %>% html_nodes("li") %>% html_nodes("script")
fighter_page %>% html_nodes("script")
fighter_page %>% html_nodes("script src")
fighter_page %>% html_nodes("script")
fighter_page %>% html_nodes("script") %>% html_text()
fighter_page %>% html_nodes("script")
read_html("https://www.tapology.com/fightcenter/fighters/chris-gruetzemacher-gritz") %>% html_nodes("script")
r <- GET("https://www.tapology.com/packs/newFightersShow-a676f1d4004bd78262c2.js")
r$headers
r$status_code
r$headers
r$cookies
r$content
r$request
r$handle
shiny::runApp('Shiny App/MatchPredictor')
source('~/GitHub/MMAscraper/Shiny App/MatchPredictor/scriptsForApp.R', echo=TRUE)
runApp('Shiny App/MatchPredictor')
source('~/GitHub/MMAscraper/scripts/0-run-scripts/Update_Everything.R', echo=TRUE)
source('~/GitHub/MMAscraper/scripts/0-run-scripts/Update_Everything.R', echo=TRUE)
library(tidyverse)
library(lubridate)
library(tidyverse)
library(lubridate)
library(rvest)
library(pbapply)
source('./scripts/11-decision-scraper/decisionScraperScripts.R', echo=TRUE)
decisions <- if ("decisions.RDS" %in% list.files("./scripts/11-decision-scraper/data")) {
readRDS("./scripts/11-decision-scraper/data/decisions.RDS")
}
fightsMMAdec <- if ("fightsMMAdec.RDS" %in% list.files("./scripts/11-decision-scraper/data")) {
readRDS("./scripts/11-decision-scraper/data/fightsMMAdec.RDS")
}
if(is.null(decisions)) rm(decisions)
if(is.null(fightsMMAdec)) rm(fightsMMAdec)
years <- c(1995:year(today()))
events <- pblapply(years, eventsScraper) %>% unlist
