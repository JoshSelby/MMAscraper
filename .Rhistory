dataset1
dataset1_past()
dataset1_past
dataset1_past()
dataset1_past() %>% pull(Result)
any(c("draw", "NC") %in% pull(dataset1_past(), Result))
input$match_num
input$match_num <- 3
input
input$match_num
rm(input)
runApp('Shiny App/MatchPredictor')
if (any(c("draw", "NC") %in% pull(dataset1_past(), Result)))
show("drawNCTable1") else show("drawNCTable1")
any(c("draw", "NC") %in% pull(dataset1_past(), Result))
runApp('Shiny App/MatchPredictor')
input$match_num
any(c("draw", "NC") %in% pull(dataset1_past(), Result))
if (any(c("draw", "NC") %in% pull(dataset1_past(), Result)))
show("drawNCTable1") else hide("drawNCTable1")
if (TRUE)
show("drawNCTable1") else hide("drawNCTable1")
?show
runApp('Shiny App/MatchPredictor')
?conditionalPanel
futureFights
futureFights <- futureFights %>% filter(rownum > 2)
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
dataset1_past()
if (any(c("draw", "NC") %in% pull(dataset1_past(), Result)))
show("drawNCTable1") else hide("drawNCTable1")
input$match_num
input$match_num
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
?disable
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
dataset1_past
dataset1_past()
dataset2_past()
output$impl
input$`match_num-selectized`
input$`match_num``
input$match_num
dataset2_past() %>%
mutate(Method = ifelse(grepl("KO", Method),"TKO/KO",Method)) %>%
filter(!(Result %in% c("win", "loss"))) %>%
group_by(Result) %>%
summarise(n=n())
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
dataset2_past()
dataset2
runApp('Shiny App/MatchPredictor')
dataset1_past9)
dataset1_past()
dataset2_past()
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
?showElement
?hideElement
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/7-scrape-odds/updateOdds.R', echo=TRUE)
source('./scripts/8-append-odds/SherdogToBFO.R', echo=TRUE)
source('./scripts/9-various-tables/Current Stats.R', echo = TRUE)
source('./scripts/9-various-tables/Add Gender.R', echo = TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
source('~/GitHub/MMAscraper/./scripts/10-future-fights/futureFights.R', echo=TRUE)
fightersTable <- readRDS("./scripts/9-various-tables/data/fightersTable.rds")
View(fightersTable)
library(shiny)
library(shinyjs)
library(tidyverse)
library(DT)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
if (x < 0) {
return(-x/((-x + 100)))
} else {
return(100/(x+100))
}
}
odds_to_return <- function(x, bet=10) {
if (x < 0) {
return(bet/-x*100)
} else {
return(x*bet/100)
}
}
runApp('Shiny App/MatchPredictor')
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
fightersTable <- readRDS("./scripts/9-various-tables/data/fightersTable.rds")
fightMetricsEvent <- readRDS("./scripts/5-metrics/data/fightMetricsEvent.rds")
filtfightsOdds <- readRDS("./scripts/8-append-odds/data/filtfightsOdds.RDS")
Sherdog_to_BFO <- readRDS("./scripts/8-append-odds/data/Sherdog_to_BFO.RDS")
futureOdds <- readRDS("./scripts/7-scrape-odds/data/futureOdds.RDS")
futureFights <- futureOdds %>%
left_join(Sherdog_to_BFO, by=c("fighter" = "BFO")) %>%
left_join(Sherdog_to_BFO, by=c("opponent" = "BFO"))
availFighters <- fightersTable %>%
pull(Link)
noSherdog <- futureFights %>%
select(fighter, Sherdog.x) %>%
filter(is.na(Sherdog.x)) %>%
pull(fighter)
minitbl <- tibble()
if (length(noSherdog)!=0) {
for (i in 1:length(noSherdog)) {
minitbl <- tibble(Sherdog = availFighters, BFO = noSherdog[i]) %>%
mutate(availStrip = Sherdog %>% gsub("(.*)(-\\d*$)", "\\1", .) %>% gsub("-", "", .) %>% tolower(),
noSherstrip = BFO %>% gsub("(.*)(-\\d*$)", "\\1", .) %>% gsub("-", "", .) %>% tolower(),
dist = stringdist(availStrip, noSherstrip, method = 'qgram')) %>%
arrange(dist) %>%
filter(dist == 0) %>%
select(Sherdog, BFO) %>%
rbind(minitbl)
}
# Not a perfect match
noSherdog %>% setdiff(minitbl$BFO)
#Manually enter
Sherdog_to_BFO <- minitbl %>%
full_join(Sherdog_to_BFO) %>%
unique()
}
#Manually enter
Sherdog_to_BFO <- minitbl %>%
rbind(c("Marcos-Rosa-Mariano-182785", "Marcos-Rosa-8870"),
c("Raulian-Paiva-Frazao-167575", "Raulian-Paiva-8553"),
c("Geraldo-de-Freitas-Jr-107229", "Geraldo-De-Freitas-8898"),
c("Carlos-Felipe-185021", "Felipe-Colares-8897")) %>%
full_join(Sherdog_to_BFO) %>%
unique()
minitbl %>%
rbind(c("Marcos-Rosa-Mariano-182785", "Marcos-Rosa-8870"),
c("Raulian-Paiva-Frazao-167575", "Raulian-Paiva-8553"),
c("Geraldo-de-Freitas-Jr-107229", "Geraldo-De-Freitas-8898"),
c("Carlos-Felipe-185021", "Felipe-Colares-8897"))
minitbl %>%
full_join(Sherdog_to_BFO) %>%
rbind(c("Marcos-Rosa-Mariano-182785", "Marcos-Rosa-8870"),
c("Raulian-Paiva-Frazao-167575", "Raulian-Paiva-8553"),
c("Geraldo-de-Freitas-Jr-107229", "Geraldo-De-Freitas-8898"),
c("Carlos-Felipe-185021", "Felipe-Colares-8897")) %>%
unique()
minitbl %>%
full_join(Sherdog_to_BFO)
minitbl <- tibble()
if (length(noSherdog)!=0) {
for (i in 1:length(noSherdog)) {
minitbl <- tibble(Sherdog = availFighters, BFO = noSherdog[i]) %>%
mutate(availStrip = Sherdog %>% gsub("(.*)(-\\d*$)", "\\1", .) %>% gsub("-", "", .) %>% tolower(),
noSherstrip = BFO %>% gsub("(.*)(-\\d*$)", "\\1", .) %>% gsub("-", "", .) %>% tolower(),
dist = stringdist(availStrip, noSherstrip, method = 'qgram')) %>%
arrange(dist) %>%
filter(dist == 0) %>%
select(Sherdog, BFO) %>%
rbind(minitbl)
}
# Not a perfect match
noSherdog %>% setdiff(minitbl$BFO)
#Manually enter
Sherdog_to_BFO <- minitbl %>%
full_join(Sherdog_to_BFO) %>%
rbind(c("Marcos-Rosa-Mariano-182785", "Marcos-Rosa-8870"),
c("Raulian-Paiva-Frazao-167575", "Raulian-Paiva-8553"),
c("Geraldo-de-Freitas-Jr-107229", "Geraldo-De-Freitas-8898"),
c("Carlos-Felipe-185021", "Felipe-Colares-8897")) %>%
unique()
}
# Manually change
futureOdds <- futureOdds %>%
filter((fighter != "Alex-Gorgees-8767" & opponent != "Alex-Gorgees-8767") &
(fighter != "Ryan-Spann-3502" & opponent != "Ryan-Spann-3502"))
rm(minitbl, availFighters, i, noSherdog)
futureFights <- futureOdds %>%
left_join(Sherdog_to_BFO, by=c("fighter" = "BFO"), suffix = c("1","2")) %>%
left_join(Sherdog_to_BFO, by=c("opponent" = "BFO"), suffix = c("1","2")) %>%
rename(Link1 = Sherdog1, Link2 = Sherdog2) %>%
left_join(fightersTable, by = c("Link1" = "Link"), suffix = c("1","2")) %>%
left_join(fightersTable, by = c("Link2" = "Link"), suffix = c("1","2")) %>%
mutate(rownum = ceiling(row_number()/2)) %>%
select(rownum, Name1, Name2, eventName, Date, rating1, rating2, Birthday1, Birthday2, wins1, loss1, draw1, nc1, wins2, loss2, draw2, nc2, `5Dimes`, Link1, Link2) %>%
rename(r1b = rating1, r2b = rating2, odds = `5Dimes`, Event = eventName, BD1 = Birthday1, BD2 = Birthday2)
lastFiveFights <- fightMetricsEvent %>%
filter(Link1 %in% futureFights$Link1)
lastFiveFights <- fightMetricsEvent %>%
filter(match_id %in% lastFiveFights$match_id)
futureFights <- lastFiveFights %>%
full_join(futureFights) %>%
arrange(Date) %>%
as.data.table()
futureFights[,
':='(fightLag1 = as.numeric(c(0, diff(Date))), # Days since last fight
fightLag1_5 = (Date - coalesce(shift(Date,5), first(Date))) %>% as.numeric(),
ratIncrease1 = c(0, diff(r1b)), # Rating increase since last fight
ratIncrease1_3 = r1b - coalesce(shift(r1b,3), first(r1b)), # Rating increase from 3 fights ago
oppRat1_5 = coalesce(cummean(r2b), roll_meanr(r2b, 5)) %>%
shift(), # Average rating of last 5 opponents
highestWin1_5 = coalesce(roll_maxr((Result2=="win")*r2b, 5), cummax(((Result2=="win")*r2b))) %>%
shift(), # Highest rated fighter defeated in last 5 fights
lowestLoss1_5 = coalesce(roll_minr(ifelse((Result2=="loss")*r2b == 0, 10000,(Result2=="loss")*r2b), 5),
cummin(ifelse((Result2=="loss")*r2b == 0, 10000,(Result2=="loss")*r2b))) %>%
shift(), # Lowest rated fighter lost to in last 5 fights
koLosses1 = cumsum(Result == "loss" & (Method=="TKO"|Method=="KO")) %>%
shift(), # number of KO losses
diff1_5 = coalesce(cummean((r1b-r2b)), roll_meanr((r1b-r2b), 5)) %>%
shift(),
Age1 = interval(BD1, Date) %>%
time_length("years")
),
by=Link1]
futureFights[,
':='(fightLag2 = as.numeric(c(0, diff(Date))),
fightLag2_5 = (Date - coalesce(shift(Date,5), first(Date))) %>% as.numeric(),
ratIncrease2 = c(0, diff(r2b)),
ratIncrease2_3 = r2b - coalesce(shift(r2b,2), first(r2b)),
oppRat2_5 = coalesce(cummean(r1b), roll_meanr(r1b, 5)) %>%
shift(),
highestWin2_5 = coalesce(roll_maxr((Result2=="loss")*r1b, 5), cummax(((Result2=="loss")*r1b))) %>%
shift(),
lowestLoss2_5 = coalesce(roll_minr(ifelse((Result2=="win")*r1b == 0, 10000,(Result2=="win")*r1b), 5),
cummin(ifelse((Result2=="win")*r1b == 0, 10000,(Result2=="win")*r1b))) %>%
shift(),
koLosses2 = cumsum(Result == "win" & (Method=="TKO"|Method=="KO")) %>%
shift(),
diff2_5 = coalesce(cummean((r2b-r1b)), roll_meanr((r2b-r1b), 5)) %>%
shift(),
Age2 = interval(BD2, Date) %>%
time_length("years")
),
by=Link2]
futureFights <- futureFights %>%
as.tibble() %>%
filter(!is.na(odds)) %>%
mutate(highestWin1_5 = ifelse(highestWin1_5==0, NA, highestWin1_5),
highestWin2_5 = ifelse(highestWin2_5==0, NA, highestWin2_5),
lowestLoss1_5 = ifelse(lowestLoss1_5==10000, NA, lowestLoss1_5),
lowestLoss2_5 = ifelse(lowestLoss2_5==10000, NA, lowestLoss2_5)) %>%
mutate_at(c("r1b", "r2b", "wins1", "loss1", "draw1", "nc1", "wins2", "loss2", "draw2", "nc2", "fightLag1", "fightLag2", "rownum", "odds"),
as.integer) %>%
select(-match_id, -Result, -Method, -Method_d, -r1a, -r2a, -Fighter1, -Fighter2, -R, -Time, -Referee, -Result2, -Org)
saveRDS(futureFights, "./scripts/10-future-fights/data/futureFights.RDS")
saveRDS(futureFights, "./Shiny App/MatchPredictor/data/futureFights.RDS")
rm(list=ls())
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/7-scrape-odds/updateOdds.R', echo=TRUE)
source('./scripts/8-append-odds/SherdogToBFO.R', echo=TRUE)
source('./scripts/9-various-tables/Current Stats.R', echo = TRUE)
source('./scripts/9-various-tables/Add Gender.R', echo = TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
if (x < 0) {
return(-x/((-x + 100)))
} else {
return(100/(x+100))
}
}
odds_to_return <- function(x, bet=10) {
if (x < 0) {
return(bet/-x*100)
} else {
return(x*bet/100)
}
}
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
View(futureFights)
View(futureFights)
source('~/GitHub/MMAscraper/scripts/0-run-scripts/Update_Everything.R', echo=TRUE)
library(shiny)
library(shinyjs)
library(tidyverse)
library(DT)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
if (x < 0) {
return(-x/((-x + 100)))
} else {
return(100/(x+100))
}
}
odds_to_return <- function(x, bet=10) {
if (x < 0) {
return(bet/-x*100)
} else {
return(x*bet/100)
}
}
runApp('Shiny App/MatchPredictor')
birthdayTable <- readRDS(file = "./scripts/2-clean-data/data/birthdayTable.rds")
birthdayTable <- birthdayTable %>%
mutate(birthday = if_else(link == "Callan-Potter-105689", as.Date("1984-09-06"), birthday),
birthday = if_else(link == "Sergei-Pavlovich-184051", as.Date("1992-05-13"), birthday),
birthday = if_else(link == "Nathaniel-Wood-82395", as.Date("1993-08-05"), birthday),
birthday = if_else(link == "Cory-Sandhagen-112869", as.Date("1992-04-20"), birthday),
birthday = if_else(link == "Daniel-Teymur-163939", as.Date("1988-02-03"), birthday),
link=if_else(link=="Dong-Hyun-Kim-21673", "Dong-Hyun-Ma-21673", link)
)
View(birthdayTable)
saveRDS(birthdayTable, "./scripts/2-clean-data/data/birthdayTable.rds")
fights <- readRDS("./scripts/2-clean-data/data/fights_clean.rds")
fights <- fights %>%
mutate(Link1=ifelse(Link1=="Dong-Hyun-Kim-21673", "Dong-Hyun-Ma-21673", Link1),
Link2=ifelse(Link2=="Dong-Hyun-Kim-21673", "Dong-Hyun-Ma-21673", Link2),
Fighter1=ifelse(Link1=="Dong-Hyun-Ma-21673", "Dong Hyun Ma", Fighter1),
Fighter2=ifelse(Link2=="Dong-Hyun-Ma-21673", "Dong Hyun Ma", Fighter2))
saveRDS(fights, "./scripts/2-clean-data/data/fights_clean.rds")
fights <- readRDS("./scripts/2-clean-data/data/fights_clean.rds")
View(fights)
birthdayTable <- readRDS(file = "./scripts/2-clean-data/data/birthdayTable.rds")
fights_tbl2 <- clean(fights_tbl2)
fights <- full_join(fights, fights_tbl2)
source('~/GitHub/MMAscraper/./scripts/1-raw-data/update-scraper.R', echo=TRUE)
source('~/GitHub/MMAscraper/./scripts/1-raw-data/update-scraper.R', echo=TRUE)
View(fights)
source('./scripts/3-records/recordAdder.R', echo=TRUE)
fights <- readRDS(file = "./scripts/3-records/data/fights_records.rds")
View(fights)
source('./scripts/4-ratings/add_ratings.R', echo=TRUE)
source('./scripts/5-metrics/metrics.R', echo=TRUE)
source('./scripts/5-metrics/events.R', echo=TRUE)
source('./scripts/7-scrape-odds/futureOdds.R', echo=TRUE)
source('./scripts/7-scrape-odds/updateOdds.R', echo=TRUE)
source('./scripts/8-append-odds/SherdogToBFO.R', echo=TRUE)
source('./scripts/9-various-tables/Current Stats.R', echo = TRUE)
source('./scripts/9-various-tables/Add Gender.R', echo = TRUE)
source('./scripts/10-future-fights/futureFights.R', echo = TRUE)
# read datasets
futureFights <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/futureFights.RDS")
fightMetricsEventOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/fightMetricsEventOdds.rds") %>%
mutate(Date = as.character(Date),
r1b = as.integer(r1b),
r2b = as.integer(r2b),
odds = as.integer(odds)) %>%
arrange(desc(match_id))
filtfightsOdds <- readRDS("~/GitHub/MMAscraper/Shiny App/MatchPredictor/data/filtfightsOdds.rds")
# extra functions
with_plus <- function(x, ...) {
if (x > 0) {
sprintf(fmt = "+%s", format(x, ...))
} else {
x
}
}
line_to_per <- function(x) {
if (x < 0) {
return(-x/((-x + 100)))
} else {
return(100/(x+100))
}
}
odds_to_return <- function(x, bet=10) {
if (x < 0) {
return(bet/-x*100)
} else {
return(x*bet/100)
}
}
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
runApp('Shiny App/MatchPredictor')
