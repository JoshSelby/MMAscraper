if (fighterEventLinks[i] %in% odds_list$searched_events) next
eventPage <- tryCatch({
read_html(paste0("https://www.bestfightodds.com", fighterEventLinks[i]))
},
error=function(cond) {
message(cond)
no_errors = FALSE
return(eventPage)
},
warning=function(cond) {
message(cond)
no_errors = FALSE
return(eventPage)
})
if(eventPage %>%
html_nodes("td") %>%
html_text() %>%
.[1] %>%
grepl("No betting lines available for this event", .)) next
fighters <- eventPage %>%
html_nodes("tr th a") %>%
html_attr("href") %>%
grep("fighters", ., value=T) %>%
head(., length(.)/2) %>%
gsub("/fighters/", "", .)
if(length(fighters) == 0) next
books <- eventPage %>%
html_nodes("thead a") %>%
html_text()
odds <- eventPage %>%
html_nodes(".odd td:nth-child(-n+14), .even td:nth-child(-n+14)") %>%
html_text() %>%
gsub("[^[:digit:]-]", "", .) %>%
as.numeric() %>%
matrix(ncol = length(books),
nrow = length(fighters),
byrow=T,
dimnames = list(fighters, books))
x <- 1:length(fighters)
oppIndex <- x-1 + 2*(x %% 2)
odds_tbl <- tibble(fighter = fighters,
opponent = fighters[oppIndex],
eventName = fighterEventNames[i],
Date = fighterDates[i]) %>%
cbind(odds %>% as.tibble) %>%
rbind(odds_tbl, .)
print(i)
}
searched_links <- searched_links %>%
append(link) %>%
unique
searched_events <- fighterEventLinks
links_to_search = odds_tbl$fighter[odds_tbl$fighter != link] %>%
unique
return(list("odds" = odds_tbl,
"searched_links" = searched_links,
"searched_events" = searched_events,
"toSearch" = links_to_search))
}
# Combines scraped odds of two fighters
bind_odds <- function(a, b) {
odds_tbl = rbind(a[[1]], b[[1]])
searched_links = append(a[[2]], b[[2]])
searched_events = append(a[[3]], b[[3]]) %>% unique
toSearch = append(a[[4]], b[[4]]) %>%
setdiff(searched_links)
return(list("odds" = odds_tbl,
"searched_links" = searched_links,
"searched_events" = searched_events,
"toSearch" = toSearch))
}
# Scrape all fighters on bestfightodds.com. Takes about an hour.
while(length(odds_list$toSearch) > 0) {
odds_list <- bind_odds(odds_list, oddsScraper(odds_list$toSearch[1]))
}
debug(oddsScraper)
# Scrape all fighters on bestfightodds.com. Takes about an hour.
while(length(odds_list$toSearch) > 0) {
odds_list <- bind_odds(odds_list, oddsScraper(odds_list$toSearch[1]))
}
fighterEventLinks
fighterEventLinks %>% odds_list$searched_events
fighterEventLinks %>% setdiff(odds_list$searched_events)
fighterEventLinks == odds_list$searched_events
fighterEventLinks %in% odds_list$searched_events
fighterEventLinks !%in% odds_list$searched_events
!(fighterEventLinks %in% odds_list$searched_events)
1:5[TRUE,TRUE,FALSE,TRUE,TRUE]
1:5[c(TRUE,TRUE,FALSE,TRUE,TRUE)]
debug(oddsScraper)
# Scrape all fighters on bestfightodds.com. Takes about an hour.
while(length(odds_list$toSearch) > 0) {
odds_list <- bind_odds(odds_list, oddsScraper(odds_list$toSearch[1]))
}
fighterEventLinks
index == !(fighterEventLinks %in% odds_list$searched_events)
index <- !(fighterEventLinks %in% odds_list$searched_events)
index
fighterEventLinks[index]
# Scrapes all events for a single fighter
oddsScraper <- function(link) {
print(link)
searched_links <- c()
links_to_search <- c()
odds_tbl <- tibble()
fighterPage <- tryCatch({
read_html(paste0("https://www.bestfightodds.com/fighters/", link))
},
error=function(cond) {
message(cond)
no_errors = FALSE
return(fighterPage)
},
warning=function(cond) {
message(cond)
no_errors = FALSE
return(fighterPage)
})
fighterEventLinks <- fighterPage %>%
html_nodes(".item-non-mobile a") %>%
html_attr("href")
index <- !(fighterEventLinks %in% odds_list$searched_events)
fighterEventLinks <- fighterEventLinks[index]
fighterEventNames <- fighterPage %>%
html_nodes(".item-non-mobile a") %>%
html_text() %>%
.[index]
fighterDates <- fighterPage %>%
html_nodes("td.item-non-mobile:nth-child(6)") %>%
html_text() %>%
sub("( \\d{,2})\\w{2}", "\\1", .) %>%
as.Date(format = "%b %d %Y") %>%
.[index]
for (i in 1:length(fighterEventLinks)) {
if (fighterEventLinks[i] %in% odds_list$searched_events) next
eventPage <- tryCatch({
read_html(paste0("https://www.bestfightodds.com", fighterEventLinks[i]))
},
error=function(cond) {
message(cond)
no_errors = FALSE
return(eventPage)
},
warning=function(cond) {
message(cond)
no_errors = FALSE
return(eventPage)
})
if(eventPage %>%
html_nodes("td") %>%
html_text() %>%
.[1] %>%
grepl("No betting lines available for this event", .)) next
fighters <- eventPage %>%
html_nodes("tr th a") %>%
html_attr("href") %>%
grep("fighters", ., value=T) %>%
head(., length(.)/2) %>%
gsub("/fighters/", "", .)
if(length(fighters) == 0) next
books <- eventPage %>%
html_nodes("thead a") %>%
html_text()
odds <- eventPage %>%
html_nodes(".odd td:nth-child(-n+14), .even td:nth-child(-n+14)") %>%
html_text() %>%
gsub("[^[:digit:]-]", "", .) %>%
as.numeric() %>%
matrix(ncol = length(books),
nrow = length(fighters),
byrow=T,
dimnames = list(fighters, books))
x <- 1:length(fighters)
oppIndex <- x-1 + 2*(x %% 2)
odds_tbl <- tibble(fighter = fighters,
opponent = fighters[oppIndex],
eventName = fighterEventNames[i],
Date = fighterDates[i]) %>%
cbind(odds %>% as.tibble) %>%
rbind(odds_tbl, .)
print(i)
}
searched_links <- searched_links %>%
append(link) %>%
unique
searched_events <- fighterEventLinks
links_to_search = odds_tbl$fighter[odds_tbl$fighter != link] %>%
unique
return(list("odds" = odds_tbl,
"searched_links" = searched_links,
"searched_events" = searched_events,
"toSearch" = links_to_search))
}
# Scrape all fighters on bestfightodds.com. Takes about an hour.
while(length(odds_list$toSearch) > 0) {
odds_list <- bind_odds(odds_list, oddsScraper(odds_list$toSearch[1]))
}
# Scrape all fighters on bestfightodds.com. Takes about an hour.
while(length(odds_list$toSearch) > 0) {
odds_list <- bind_odds(odds_list, oddsScraper(odds_list$toSearch[1]))
}
odds_list <- list("odds" = tibble(),
"searched_links" = c(),
"searched_events" = c(),
"toSearch" = "Chael-Sonnen-106")
# Scrapes all events for a single fighter
oddsScraper <- function(link) {
print(link)
searched_links <- c()
links_to_search <- c()
odds_tbl <- tibble()
fighterPage <- tryCatch({
read_html(paste0("https://www.bestfightodds.com/fighters/", link))
},
error=function(cond) {
message(cond)
no_errors = FALSE
return(fighterPage)
},
warning=function(cond) {
message(cond)
no_errors = FALSE
return(fighterPage)
})
fighterEventLinks <- fighterPage %>%
html_nodes(".item-non-mobile a") %>%
html_attr("href")
index <- !(fighterEventLinks %in% odds_list$searched_events)
fighterEventLinks <- fighterEventLinks[index]
fighterEventNames <- fighterPage %>%
html_nodes(".item-non-mobile a") %>%
html_text() %>%
.[index]
fighterDates <- fighterPage %>%
html_nodes("td.item-non-mobile:nth-child(6)") %>%
html_text() %>%
sub("( \\d{,2})\\w{2}", "\\1", .) %>%
as.Date(format = "%b %d %Y") %>%
.[index]
for (i in 1:length(fighterEventLinks)) {
if (fighterEventLinks[i] %in% odds_list$searched_events) next
eventPage <- tryCatch({
read_html(paste0("https://www.bestfightodds.com", fighterEventLinks[i]))
},
error=function(cond) {
message(cond)
no_errors = FALSE
return(eventPage)
},
warning=function(cond) {
message(cond)
no_errors = FALSE
return(eventPage)
})
if(eventPage %>%
html_nodes("td") %>%
html_text() %>%
.[1] %>%
grepl("No betting lines available for this event", .)) next
fighters <- eventPage %>%
html_nodes("tr th a") %>%
html_attr("href") %>%
grep("fighters", ., value=T) %>%
head(., length(.)/2) %>%
gsub("/fighters/", "", .)
if(length(fighters) == 0) next
books <- eventPage %>%
html_nodes("thead a") %>%
html_text()
odds <- eventPage %>%
html_nodes(".odd td:nth-child(-n+14), .even td:nth-child(-n+14)") %>%
html_text() %>%
gsub("[^[:digit:]-]", "", .) %>%
as.numeric() %>%
matrix(ncol = length(books),
nrow = length(fighters),
byrow=T,
dimnames = list(fighters, books))
x <- 1:length(fighters)
oppIndex <- x-1 + 2*(x %% 2)
odds_tbl <- tibble(fighter = fighters,
opponent = fighters[oppIndex],
eventName = fighterEventNames[i],
eventLink = fighterEventLinks[i],
Date = fighterDates[i]) %>%
cbind(odds %>% as.tibble) %>%
rbind(odds_tbl, .)
print(i)
}
searched_links <- searched_links %>%
append(link) %>%
unique
searched_events <- fighterEventLinks
links_to_search = odds_tbl$fighter[odds_tbl$fighter != link] %>%
unique
return(list("odds" = odds_tbl,
"searched_links" = searched_links,
"searched_events" = searched_events,
"toSearch" = links_to_search))
}
# Combines scraped odds of two fighters
bind_odds <- function(a, b) {
odds_tbl = rbind(a[[1]], b[[1]])
searched_links = append(a[[2]], b[[2]])
searched_events = append(a[[3]], b[[3]]) %>% unique
toSearch = append(a[[4]], b[[4]]) %>%
setdiff(searched_links)
return(list("odds" = odds_tbl,
"searched_links" = searched_links,
"searched_events" = searched_events,
"toSearch" = toSearch))
}
# Scrape all fighters on bestfightodds.com. Takes about an hour.
while(length(odds_list$toSearch) > 0) {
odds_list <- bind_odds(odds_list, oddsScraper(odds_list$toSearch[1]))
}
for(i in 1:0) {print(i)}
# Scrapes all events for a single fighter
oddsScraper <- function(link) {
print(link)
searched_links <- c()
links_to_search <- c()
odds_tbl <- tibble()
fighterPage <- tryCatch({
read_html(paste0("https://www.bestfightodds.com/fighters/", link))
},
error=function(cond) {
message(cond)
no_errors = FALSE
return(fighterPage)
},
warning=function(cond) {
message(cond)
no_errors = FALSE
return(fighterPage)
})
fighterEventLinks <- fighterPage %>%
html_nodes(".item-non-mobile a") %>%
html_attr("href")
index <- !(fighterEventLinks %in% odds_list$searched_events)
fighterEventLinks <- fighterEventLinks[index]
fighterEventNames <- fighterPage %>%
html_nodes(".item-non-mobile a") %>%
html_text() %>%
.[index]
fighterDates <- fighterPage %>%
html_nodes("td.item-non-mobile:nth-child(6)") %>%
html_text() %>%
sub("( \\d{,2})\\w{2}", "\\1", .) %>%
as.Date(format = "%b %d %Y") %>%
.[index]
if (length(fighterEventLinks) > 0) {
for (i in 1:length(fighterEventLinks)) {
if (fighterEventLinks[i] %in% odds_list$searched_events) next
eventPage <- tryCatch({
read_html(paste0("https://www.bestfightodds.com", fighterEventLinks[i]))
},
error=function(cond) {
message(cond)
no_errors = FALSE
return(eventPage)
},
warning=function(cond) {
message(cond)
no_errors = FALSE
return(eventPage)
})
if(eventPage %>%
html_nodes("td") %>%
html_text() %>%
.[1] %>%
grepl("No betting lines available for this event", .)) next
fighters <- eventPage %>%
html_nodes("tr th a") %>%
html_attr("href") %>%
grep("fighters", ., value=T) %>%
head(., length(.)/2) %>%
gsub("/fighters/", "", .)
if(length(fighters) == 0) next
books <- eventPage %>%
html_nodes("thead a") %>%
html_text()
odds <- eventPage %>%
html_nodes(".odd td:nth-child(-n+14), .even td:nth-child(-n+14)") %>%
html_text() %>%
gsub("[^[:digit:]-]", "", .) %>%
as.numeric() %>%
matrix(ncol = length(books),
nrow = length(fighters),
byrow=T,
dimnames = list(fighters, books))
x <- 1:length(fighters)
oppIndex <- x-1 + 2*(x %% 2)
odds_tbl <- tibble(fighter = fighters,
opponent = fighters[oppIndex],
eventName = fighterEventNames[i],
eventLink = fighterEventLinks[i],
Date = fighterDates[i]) %>%
cbind(odds %>% as.tibble) %>%
rbind(odds_tbl, .)
print(i)
}
}
searched_links <- searched_links %>%
append(link) %>%
unique
searched_events <- fighterEventLinks
links_to_search = odds_tbl$fighter[odds_tbl$fighter != link] %>%
unique
return(list("odds" = odds_tbl,
"searched_links" = searched_links,
"searched_events" = searched_events,
"toSearch" = links_to_search))
}
# Combines scraped odds of two fighters
bind_odds <- function(a, b) {
odds_tbl = rbind(a[[1]], b[[1]])
searched_links = append(a[[2]], b[[2]])
searched_events = append(a[[3]], b[[3]]) %>% unique
toSearch = append(a[[4]], b[[4]]) %>%
setdiff(searched_links)
return(list("odds" = odds_tbl,
"searched_links" = searched_links,
"searched_events" = searched_events,
"toSearch" = toSearch))
}
# Scrape all fighters on bestfightodds.com. Takes about an hour.
while(length(odds_list$toSearch) > 0) {
odds_list <- bind_odds(odds_list, oddsScraper(odds_list$toSearch[1]))
}
saveRDS(odds_list, "./scrape-odds-7/odds_list.RDS")
odds_list <- readRDS("./scrape-odds-7/odds_List.RDS")
odds_list$odds %>% View()
library(tidyverse)
odds_list$odds %>% View()
source('~/GitHub/MMAscraper/raw-data-1/parallel-scraper.R', echo=TRUE)
parScrap()
if(exists("fights_list")) {
saveRDS(fights_list, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
}
parScrap()
if(exists("fights_list")) {
saveRDS(fights_list, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
}
parScrap()
if(exists("fights_list")) {
saveRDS(fights_list, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
}
View(fights_list2)
parScrap()
debug(parScrap)
parScrap()
if(exists("fights_list")) {
saveRDS(fights_list, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
}
fights_list2
# Initialize fights table
fights_list <- list("fights" = NULL,
"searched" = tibble("searched" = character(), "birthday" = date()),
"toSearch" = link)
parScrap <- function(fightsList) {
NumberOfCluster <- detectCores()
cl <- NumberOfCluster %>% makeCluster(outfile="log.txt")
registerDoSNOW(cl)
fights_list <- fightsList
# Will run until all fighters to scrape are exausted.
# Scrapes 100 fighters per iteration, taking about 12 seconds each. ~30k/hour
# Script may stop from timing out. You can simply resume from where you left off.
while(fights_list[[3]] %>% length >= 1) {
print(system.time({
pb <- fights_list[[3]] %>%
head(100) %>% length %>%
txtProgressBar(max = ., style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
fights_list2 <<- foreach(link2=head(fights_list[[3]], 100), .combine='bind', .multicombine=TRUE,
.maxcombine=2, .export=c("link", "scrape"),
.options.snow = opts) %dopar% {
scrape(link2)
} %>% bind(fights_list, .)
fights_list <- bind(fights_list, fights_list2)
}))
rm(fights_list2)
}
stopCluster(cl)
rm(NumberOfCluster, opts, pb)
}
rm(fights_list)
parScrap(fights_list2)
parScrap(fights_list2)
if(exists("fights_list")) {
saveRDS(fights_list, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
}
if(exists("fights_list")) {
saveRDS(fights_list, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
}
if(exists("fights_list2")) {
saveRDS(fights_list2, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
}
parScrap(fights_list2)
warnings()
parScrap(fights_list2)
parScrap(fights_list2)
if(exists("fights_list2")) {
saveRDS(fights_list2, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
}
parScrap(fights_list2)
saveRDS(fights_list2, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
parScrap(fights_list2)
saveRDS(fights_list2, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
parScrap(fights_list2)
saveRDS(fights_list2, file = "~/GitHub/MMAscraper/raw-data-1/fights_table.rds")
